import os
import logging
import random
from io import BytesIO
from urllib.parse import quote_plus
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# --- CONFIGURATION / –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv() # Load variables from .env file / –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    # This will stop the bot if the token is missing in .env
    # –≠—Ç–∞ —Å—Ç—Ä–æ—á–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ —Å–æ–∑–¥–∞—Ç—å .env –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤ –Ω–µ–º —Ç–æ–∫–µ–Ω
    raise ValueError("BOT_TOKEN not found in .env file!")

# Path to the dictionaries folder
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
DICT_PATH = "dictionaries/"

# --- TEXTS FOR LOCALIZATION / –¢–ï–ö–°–¢–´ –î–õ–Ø –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò ---
TEXTS = {
    'en': {
        'welcome_new': "üëã Hi, {user}!\n\nLooks like you're new here. Please choose your language:",
        'welcome_existing': "Your active dictionary: <b>{dict}</b>\n\nChoose an action:",
        'choose_dict_prompt': "Great! Now choose a default dictionary:",
        'available_dicts': "Available dictionaries:",
        'dict_changed': "‚úÖ Default dictionary changed to: <b>{dict}</b>.",
        'lets_start': "Let's begin:",
        'choose_word_count': "Choose how many words you want to get:",
        'no_dict_selected': "Please select a dictionary first! Send /start",
        'no_words_in_dict': "There are no words in this dictionary!",
        'random_word_title': "üé≤ Word:",
        'multiple_words_title': "Words:",
        'file_ready': "‚úÖ Your file with words is ready:",
        'whats_next': "What's next?",
        'btn_random_word': "üé≤ Random Word",
        'btn_get_multiple': "üî¢ Get Multiple",
        'btn_change_dict': "‚öôÔ∏è Change Dictionary",
        'btn_change_lang': "üåê Change Language",
        'btn_back': "‚¨ÖÔ∏è Back",
        'choose_lang_prompt': "Please choose your language:",
    },
    'ru': {
        'welcome_new': "üëã –ü—Ä–∏–≤–µ—Ç, {user}!\n\n–ü–æ—Ö–æ–∂–µ, —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        'welcome_existing': "–¢–≤–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: <b>{dict}</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'choose_dict_prompt': "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
        'available_dicts': "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏:",
        'dict_changed': "‚úÖ –°–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>{dict}</b>.",
        'lets_start': "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å:",
        'choose_word_count': "–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:",
        'no_dict_selected': "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start",
        'no_words_in_dict': "–í —ç—Ç–æ–º —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —Å–ª–æ–≤!",
        'random_word_title': "üé≤ –°–ª–æ–≤–æ:",
        'multiple_words_title': "–°–ª–æ–≤–∞:",
        'file_ready': "‚úÖ –¢–≤–æ–π —Ñ–∞–π–ª —Å–æ —Å–ª–æ–≤–∞–º–∏ –≥–æ—Ç–æ–≤:",
        'whats_next': "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        'btn_random_word': "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ",
        'btn_get_multiple': "üî¢ –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ",
        'btn_change_dict': "‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å",
        'btn_change_lang': "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'btn_back': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        'choose_lang_prompt': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    }
}


# --- INTERNAL VARIABLES / –í–ù–£–¢–†–ï–ù–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
# Dictionary to store user's selected dictionary {user_id: 'filename.txt'}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id: 'filename.txt'}
user_selected_dict = {}

# Dictionary to store user's selected language {user_id: 'en' | 'ru'}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id: 'en' | 'ru'}
user_language = {}

# Setup logging for debugging
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- HELPER FUNCTIONS / –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_text(key: str, lang: str):
    """Gets text string for a given language. Defaults to English."""
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."""
    return TEXTS.get(lang, TEXTS['en']).get(key, f"<{key}>")

def get_available_dictionaries():
    """Scans the DICT_PATH folder and returns a list of .txt files."""
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É DICT_PATH –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ .txt."""
    if not os.path.exists(DICT_PATH):
        os.makedirs(DICT_PATH)
    return [f for f in os.listdir(DICT_PATH) if f.endswith('.txt')]

def get_words_from_dict(filename: str, count: int = 0):
    """Reads words from a file. If count=0, returns all. Otherwise, random ones."""
    """–ß–∏—Ç–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ count=0, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ. –ò–Ω–∞—á–µ - —Å–ª—É—á–∞–π–Ω—ã–µ."""
    try:
        with open(os.path.join(DICT_PATH, filename), 'r', encoding='utf-8') as f:
            words = [line.strip() for line in f if line.strip()]
        if count == 0:
            return words
        return random.sample(words, min(count, len(words)))
    except FileNotFoundError:
        return []

# --- KEYBOARD GENERATORS / –ì–ï–ù–ï–†–ê–¢–û–†–´ –ö–õ–ê–í–ò–ê–¢–£–† ---

async def get_lang_keyboard():
    """Returns the language selection keyboard."""
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    keyboard = [[
        InlineKeyboardButton("üá¨üáß English", callback_data="set_lang:en"),
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang:ru")
    ]]
    return InlineKeyboardMarkup(keyboard)

async def get_main_menu_keyboard(lang: str):
    """Returns the main menu keyboard."""
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton(get_text('btn_random_word', lang), callback_data="get_random_word")],
        [InlineKeyboardButton(get_text('btn_get_multiple', lang), callback_data="show_get_multiple_menu")],
        [InlineKeyboardButton(get_text('btn_change_dict', lang), callback_data="change_dict_menu")],
        [InlineKeyboardButton(get_text('btn_change_lang', lang), callback_data="change_lang_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_dict_selection_keyboard(action_prefix: str):
    """Returns a keyboard for selecting a dictionary."""
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è."""
    dictionaries = get_available_dictionaries()
    keyboard = [[InlineKeyboardButton(d.replace('.txt', ''), callback_data=f"{action_prefix}:{d}")] for d in dictionaries]
    return InlineKeyboardMarkup(keyboard)

async def get_multiple_words_keyboard(lang: str):
    """Returns a keyboard for selecting the number of words."""
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤."""
    keyboard = [
        [
            InlineKeyboardButton("5", callback_data="get_multiple:5"),
            InlineKeyboardButton("10", callback_data="get_multiple:10"),
            InlineKeyboardButton("15", callback_data="get_multiple:15"),
        ],
        [InlineKeyboardButton("üìú " + get_text('btn_all_words', lang, default="All Words"), callback_data="get_multiple:all")], # Example with default
        [InlineKeyboardButton(get_text('btn_back', lang), callback_data="back_to_main_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- COMMAND AND BUTTON HANDLERS / –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command."""
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    logger.info(f"User {user.id} ({user.first_name}) started the bot.")
    
    # 1. Check if language is selected
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —è–∑—ã–∫
    if user.id not in user_language:
        await update.message.reply_html(
            TEXTS['ru']['welcome_new'].format(user=user.mention_html()), # Show bilingual welcome
            reply_markup=await get_lang_keyboard()
        )
        return

    lang = user_language[user.id]

    # 2. Check if dictionary is selected
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Å–ª–æ–≤–∞—Ä—å
    if user.id not in user_selected_dict:
        await update.message.reply_text(get_text('choose_dict_prompt', lang))
        keyboard = await get_dict_selection_keyboard("set_default_dict")
        await update.message.reply_text(get_text('available_dicts', lang), reply_markup=keyboard)
    else:
        active_dict = user_selected_dict[user.id]
        keyboard = await get_main_menu_keyboard(lang)
        await update.message.reply_text(
            get_text('welcome_existing', lang).format(dict=active_dict),
            reply_markup=keyboard,
            parse_mode='HTML'
        )

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Main handler for all inline button clicks."""
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data

    # --- Language selection logic ---
    # --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ---
    if data.startswith("set_lang:"):
        lang = data.split(":")[1]
        user_language[user_id] = lang
        logger.info(f"User {user_id} set language to {lang}")
        
        # Now prompt for dictionary selection
        # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞—Ä—è
        keyboard = await get_dict_selection_keyboard("set_default_dict")
        await query.edit_message_text(
            get_text('choose_dict_prompt', lang),
            reply_markup=keyboard
        )
        return

    # All subsequent actions require a language to be set
    # –í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    if user_id not in user_language:
        await query.edit_message_text("Please choose a language first / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.", reply_markup=await get_lang_keyboard())
        return
        
    lang = user_language[user_id]

    # --- Dictionary selection logic ---
    # --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è ---
    if data.startswith("set_default_dict:"):
        dict_name = data.split(":")[1]
        user_selected_dict[user_id] = dict_name
        logger.info(f"User {user_id} set default dict to {dict_name}")
        await query.edit_message_text(get_text('dict_changed', lang).format(dict=dict_name), parse_mode='HTML')
        
        keyboard = await get_main_menu_keyboard(lang)
        await query.message.reply_text(get_text('lets_start', lang), reply_markup=keyboard)
        return

    # Check that a dictionary is selected for game actions
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å –≤—ã–±—Ä–∞–Ω –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if user_id not in user_selected_dict and not data.startswith('change_lang'):
        await query.edit_message_text(get_text('no_dict_selected', lang))
        return

    active_dict = user_selected_dict.get(user_id)

    # --- Main menu logic ---
    # --- –õ–æ–≥–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    if data == "get_random_word":
        word = get_words_from_dict(active_dict, 1)
        if word:
            word_text = word[0]
            google_link = f"https://www.google.com/search?q={quote_plus(word_text)}&hl={lang}"
            await query.edit_message_text(
                f"{get_text('random_word_title', lang)} <a href='{google_link}'><b>{word_text}</b></a>",
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(get_text('no_words_in_dict', lang))
        await query.message.reply_text(get_text('whats_next', lang), reply_markup=await get_main_menu_keyboard(lang))

    elif data == "show_get_multiple_menu":
        # Note: 'btn_all_words' key is missing from TEXTS, so the default will be used.
        # This is to show how the default works. You should add it to the TEXTS dict.
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∫–ª—é—á 'btn_all_words' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ TEXTS, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        # –≠—Ç–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –í–∞–º —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å TEXTS.
        keyboard = await get_multiple_words_keyboard(lang)
        await query.edit_message_text(get_text('choose_word_count', lang), reply_markup=keyboard)
        
    elif data == "change_dict_menu":
        keyboard = await get_dict_selection_keyboard("set_default_dict")
        await query.edit_message_text(get_text('available_dicts', lang), reply_markup=keyboard)

    elif data == "change_lang_menu":
        keyboard = await get_lang_keyboard()
        await query.edit_message_text(get_text('choose_lang_prompt', lang), reply_markup=keyboard)
        
    elif data == "back_to_main_menu":
        keyboard = await get_main_menu_keyboard(lang)
        await query.edit_message_text(
            get_text('welcome_existing', lang).format(dict=active_dict),
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    elif data.startswith("get_multiple:"):
        param = data.split(":")[1]
        words_to_get = 0 if param == 'all' else int(param)
        word_list = get_words_from_dict(active_dict, words_to_get)

        if not word_list:
            await query.edit_message_text(get_text('no_words_in_dict', lang))
            return

        if len(word_list) <= 10:
            response_text = get_text('multiple_words_title', lang) + "\n" + "\n".join(
                f"‚Ä¢ <a href='https://www.google.com/search?q={quote_plus(w)}&hl={lang}'>{w}</a>" for w in word_list
            )
            await query.edit_message_text(response_text, parse_mode='HTML')
        else:
            file_content = "\n".join(word_list).encode('utf-8')
            file_in_memory = BytesIO(file_content)
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=file_in_memory,
                filename=f"words_from_{active_dict}"
            )
            await query.edit_message_text(get_text('file_ready', lang))

        await query.message.reply_text(get_text('whats_next', lang), reply_markup=await get_main_menu_keyboard(lang))


# --- MAIN FUNCTION TO RUN THE BOT ---
# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---
def main():
    """Run the bot."""
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    
    logger.info("Starting bot...")
    application.run_polling()

if __name__ == "__main__":
    main()