import os
import logging
import random
from io import BytesIO
from urllib.parse import quote_plus
from dotenv import load_dotenv
import json

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler, MessageHandler, 
                          filters, ContextTypes, ConversationHandler)
from telegram.error import NetworkError

# --- CONFIGURATION / –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not found in .env file!")

DICT_PATH = "dictionaries/"
USER_DATA_FILE = "user_data.json"

# --- TEXTS FOR LOCALIZATION / –¢–ï–ö–°–¢–´ –î–õ–Ø –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò ---
# ... (–¢—É—Ç —Ç–≤–æ–π –±–æ–ª—å—à–æ–π —Å–ª–æ–≤–∞—Ä—å TEXTS, –æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
TEXTS = {
    'en': {
        'welcome_new': "üëã Hi, {user}!\n\nLooks like you're new here. Please choose your language:",
        'welcome_existing': "Your active dictionary: <b>{dict}</b>\n\nChoose an action:",
        'choose_dict_prompt': "Great! Now choose a default dictionary:",
        'available_dicts': "Available dictionaries:",
        'dict_changed': "‚úÖ Default dictionary changed to: <b>{dict}</b>.",
        'lets_start': "Let's begin:",
        'choose_word_count': "Choose how many words you want to get:",
        'no_dict_selected': "Please select a dictionary first! Send /start",
        'no_words_in_dict': "There are no words in this dictionary!",
        'random_word_title': "üé≤ Word:",
        'multiple_words_title': "Words:",
        'file_ready': "‚úÖ Your file with words is ready:",
        'whats_next': "What's next?",
        'btn_random_word': "üé≤ Random Word",
        'btn_get_multiple': "üî¢ Get Multiple",
        'btn_change_dict': "‚öôÔ∏è Change Dictionary",
        'btn_change_lang': "üåê Change Language",
        'btn_back': "‚¨ÖÔ∏è Back",
        'btn_all_words': "üìú All Words",
        'choose_lang_prompt': "Please choose your language:",
        'upload_prompt': "Send me a `.txt` file with words, each on a new line.",
        'upload_success': "‚úÖ Dictionary `{filename}` uploaded and set as active.",
        'addword_prompt': "Send me the word(s) you want to add.",
        'addword_choose_dict': "Which dictionary to add the word(s) to?",
        'addword_success': "‚úÖ Word(s) added to `{dict_name}`.",
    },
    'ru': {
        'welcome_new': "üëã –ü—Ä–∏–≤–µ—Ç, {user}!\n\n–ü–æ—Ö–æ–∂–µ, —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        'welcome_existing': "–¢–≤–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: <b>{dict}</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'choose_dict_prompt': "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
        'available_dicts': "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏:",
        'dict_changed': "‚úÖ –°–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>{dict}</b>.",
        'lets_start': "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å:",
        'choose_word_count': "–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:",
        'no_dict_selected': "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start",
        'no_words_in_dict': "–í —ç—Ç–æ–º —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —Å–ª–æ–≤!",
        'random_word_title': "üé≤ –°–ª–æ–≤–æ:",
        'multiple_words_title': "–°–ª–æ–≤–∞:",
        'file_ready': "‚úÖ –¢–≤–æ–π —Ñ–∞–π–ª —Å–æ —Å–ª–æ–≤–∞–º–∏ –≥–æ—Ç–æ–≤:",
        'whats_next': "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        'btn_random_word': "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ",
        'btn_get_multiple': "üî¢ –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ",
        'btn_change_dict': "‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å",
        'btn_change_lang': "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'btn_back': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        'btn_all_words': "üìú –í–µ—Å—å —Å–ª–æ–≤–∞—Ä—å",
        'choose_lang_prompt': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'upload_prompt': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª `.txt` —Å–æ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∂–¥–æ–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
        'upload_success': "‚úÖ –°–ª–æ–≤–∞—Ä—å `{filename}` –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π.",
        'addword_prompt': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ (–∏–ª–∏ —Å–ª–æ–≤–∞), –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.",
        'addword_choose_dict': "–í –∫–∞–∫–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞?",
        'addword_success': "‚úÖ –°–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä—å `{dict_name}`.",
    }
}
# --- DATA MANAGEMENT / –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò ---

def load_data():
    """Loads user data from a JSON file."""
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(USER_DATA_FILE, 'r') as f:
            data = json.load(f)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏–∑ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Å–ª–∞, —Ç–∞–∫ –∫–∞–∫ JSON —Ö—Ä–∞–Ω–∏—Ç –∫–ª—é—á–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            user_language = {int(k): v for k, v in data.get("user_language", {}).items()}
            user_selected_dict = {int(k): v for k, v in data.get("user_selected_dict", {}).items()}
            return user_language, user_selected_dict
    except (FileNotFoundError, json.JSONDecodeError):
        return {}, {}

def save_data(lang_data, dict_data):
    """Saves user data to a JSON file."""
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª."""
    with open(USER_DATA_FILE, 'w') as f:
        json.dump({"user_language": lang_data, "user_selected_dict": dict_data}, f, indent=4)

# Load data on startup
# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_language, user_selected_dict = load_data()

# Setup logging for debugging
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- HELPER FUNCTIONS ---

def get_text(key: str, lang: str, default: str = None):
    """Gets text string for a given language. Defaults to English or provided default."""
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É. –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–µ—Ç default –∏–ª–∏ <key>."""
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    return TEXTS.get(lang, TEXTS['en']).get(key, default or f"<{key}>")
# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_available_dictionaries, get_words_from_dict –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_available_dictionaries():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É DICT_PATH –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ .txt."""
    if not os.path.exists(DICT_PATH):
        os.makedirs(DICT_PATH)
    return [f for f in os.listdir(DICT_PATH) if f.endswith('.txt')]

def get_words_from_dict(filename: str, count: int = 0):
    """–ß–∏—Ç–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ count=0, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ. –ò–Ω–∞—á–µ - —Å–ª—É—á–∞–π–Ω—ã–µ."""
    try:
        with open(os.path.join(DICT_PATH, filename), 'r', encoding='utf-8') as f:
            words = [line.strip() for line in f if line.strip()]
        if count == 0:
            return words
        return random.sample(words, min(count, len(words)))
    except FileNotFoundError:
        return []

# --- KEYBOARD GENERATORS (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# ...
async def get_lang_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    keyboard = [[
        InlineKeyboardButton("üá¨üáß English", callback_data="set_lang:en"),
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang:ru")
    ]]
    return InlineKeyboardMarkup(keyboard)

async def get_main_menu_keyboard(lang: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton(get_text('btn_random_word', lang), callback_data="get_random_word")],
        [InlineKeyboardButton(get_text('btn_get_multiple', lang), callback_data="show_get_multiple_menu")],
        [InlineKeyboardButton(get_text('btn_change_dict', lang), callback_data="change_dict_menu")],
        [InlineKeyboardButton(get_text('btn_change_lang', lang), callback_data="change_lang_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_dict_selection_keyboard(action_prefix: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è."""
    dictionaries = get_available_dictionaries()
    keyboard = [[InlineKeyboardButton(d.replace('.txt', ''), callback_data=f"{action_prefix}:{d}")] for d in dictionaries]
    return InlineKeyboardMarkup(keyboard)

async def get_multiple_words_keyboard(lang: str):
    """–í–æ–∑–≤—Ä–∞-—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤."""
    keyboard = [
        [
            InlineKeyboardButton("5", callback_data="get_multiple:5"),
            InlineKeyboardButton("10", callback_data="get_multiple:10"),
            InlineKeyboardButton("15", callback_data="get_multiple:15"),
        ],
        [InlineKeyboardButton(get_text('btn_all_words', lang), callback_data="get_multiple:all")],
        [InlineKeyboardButton(get_text('btn_back', lang), callback_data="back_to_main_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)
# --- HANDLERS / –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

# ... (start –∏ button_callback_handler –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    logger.info(f"User {user.id} ({user.first_name}) started the bot.")
    
    if user.id not in user_language:
        await update.message.reply_html(
            TEXTS['ru']['welcome_new'].format(user=user.mention_html()), 
            reply_markup=await get_lang_keyboard()
        )
        return

    lang = user_language[user.id]

    if user.id not in user_selected_dict:
        await update.message.reply_text(get_text('choose_dict_prompt', lang))
        keyboard = await get_dict_selection_keyboard("set_default_dict")
        await update.message.reply_text(get_text('available_dicts', lang), reply_markup=keyboard)
    else:
        active_dict = user_selected_dict[user.id]
        keyboard = await get_main_menu_keyboard(lang)
        await update.message.reply_text(
            get_text('welcome_existing', lang).format(dict=active_dict),
            reply_markup=keyboard,
            parse_mode='HTML'
        )
# ConversationHandler states for /addword
AWAITING_WORDS, AWAITING_DICT_CHOICE = range(2)

async def addword_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the /addword conversation."""
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'en')
    await update.message.reply_text(get_text('addword_prompt', lang))
    return AWAITING_WORDS

async def addword_receive_words(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Receives words and asks for dictionary selection."""
    context.user_data['words_to_add'] = update.message.text.splitlines()
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'en')
    
    keyboard = await get_dict_selection_keyboard("addword_to_dict")
    await update.message.reply_text(get_text('addword_choose_dict', lang), reply_markup=keyboard)
    return AWAITING_DICT_CHOICE

async def dict_upload_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the /dict_upload command by asking for a file."""
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'en')
    await update.message.reply_text(get_text('upload_prompt', lang))

async def dict_upload_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Saves the uploaded dictionary file."""
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'en')
    
    document = update.message.document
    if document and document.file_name.endswith('.txt'):
        file = await document.get_file()
        file_path = os.path.join(DICT_PATH, document.file_name)
        await file.download_to_drive(file_path)
        
        user_selected_dict[user_id] = document.file_name
        save_data(user_language, user_selected_dict)
        
        await update.message.reply_text(get_text('upload_success', lang).format(filename=document.file_name))
        await start(update, context) # Show main menu
    else:
        await update.message.reply_text("Please send a .txt file.")


async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data

    if data.startswith("set_lang:"):
        lang = data.split(":")[1]
        user_language[user_id] = lang
        save_data(user_language, user_selected_dict)
        logger.info(f"User {user_id} set language to {lang}")
        
        keyboard = await get_dict_selection_keyboard("set_default_dict")
        await query.edit_message_text(get_text('choose_dict_prompt', lang), reply_markup=keyboard)
        return

    # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∏–∑ ConversationHandler
    if data.startswith("addword_to_dict:"):
        dict_name = data.split(":", 1)[1]
        words = context.user_data.get('words_to_add', [])
        if words:
            with open(os.path.join(DICT_PATH, dict_name), 'a', encoding='utf-8') as f:
                for word in words:
                    f.write(f"\n{word}")
            lang = user_language.get(user_id, 'en')
            await query.edit_message_text(get_text('addword_success', lang).format(dict_name=dict_name))
            context.user_data.clear()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            await start(query, context)
        return ConversationHandler.END

    lang = user_language.get(user_id) # Get lang, default handled by get_text

    if data.startswith("set_default_dict:"):
        dict_name = data.split(":")[1]
        user_selected_dict[user_id] = dict_name
        save_data(user_language, user_selected_dict)
        logger.info(f"User {user_id} set default dict to {dict_name}")
        await query.edit_message_text(get_text('dict_changed', lang).format(dict=dict_name), parse_mode='HTML')
        
        keyboard = await get_main_menu_keyboard(lang)
        await query.message.reply_text(get_text('lets_start', lang), reply_markup=keyboard)
        return

    if user_id not in user_selected_dict and not data.startswith('change_lang'):
        await query.edit_message_text(get_text('no_dict_selected', lang))
        return

    active_dict = user_selected_dict.get(user_id)
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å button_callback_handler –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if data == "get_random_word":
        word = get_words_from_dict(active_dict, 1)
        if word:
            word_text = word[0]
            dictionary_link = f"https://{lang}.wiktionary.org/wiki/{quote_plus(word_text)}"
            await query.edit_message_text(
                f"{get_text('random_word_title', lang)} <a href='{dictionary_link}'><b>{word_text}</b></a>",
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(get_text('no_words_in_dict', lang))
        await query.message.reply_text(get_text('whats_next', lang), reply_markup=await get_main_menu_keyboard(lang))

    elif data == "show_get_multiple_menu":
        keyboard = await get_multiple_words_keyboard(lang)
        await query.edit_message_text(get_text('choose_word_count', lang), reply_markup=keyboard)
        
    elif data == "change_dict_menu":
        keyboard = await get_dict_selection_keyboard("set_default_dict")
        await query.edit_message_text(get_text('available_dicts', lang), reply_markup=keyboard)

    elif data == "change_lang_menu":
        keyboard = await get_lang_keyboard()
        await query.edit_message_text(get_text('choose_lang_prompt', lang), reply_markup=keyboard)
        
    elif data == "back_to_main_menu":
        keyboard = await get_main_menu_keyboard(lang)
        await query.edit_message_text(
            get_text('welcome_existing', lang).format(dict=active_dict),
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    elif data.startswith("get_multiple:"):
        param = data.split(":")[1]
        words_to_get = 0 if param == 'all' else int(param)
        word_list = get_words_from_dict(active_dict, words_to_get)

        if not word_list:
            await query.edit_message_text(get_text('no_words_in_dict', lang))
            return

        if len(word_list) <= 10:
            response_text = get_text('multiple_words_title', lang) + "\n" + "\n".join(
                f"‚Ä¢ <a href='https://{lang}.wiktionary.org/wiki/{quote_plus(w)}'>{w}</a>" for w in word_list
            )
            await query.edit_message_text(response_text, parse_mode='HTML')
        else:
            file_content = "\n".join(word_list).encode('utf-8')
            file_in_memory = BytesIO(file_content)
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=file_in_memory,
                filename=f"words_from_{active_dict}"
            )
            await query.edit_message_text(get_text('file_ready', lang))

        await query.message.reply_text(get_text('whats_next', lang), reply_markup=await get_main_menu_keyboard(lang))

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """Log the error and send a message to the user."""
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É."""
    logger.error("Exception while handling an update:", exc_info=context.error)
    # –ú—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ —Å–µ—Ç–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    # –Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # if isinstance(context.error, NetworkError):
    #     logger.warning("Telegram NetworkError occurred.")

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    await update.message.reply_text("Action canceled.")
    return ConversationHandler.END


# --- MAIN FUNCTION TO RUN THE BOT ---
def main():
    """Run the bot."""
    application = Application.builder().token(BOT_TOKEN).build()

    # Conversation handler for /addword
    addword_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("addword", addword_start)],
        states={
            AWAITING_WORDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, addword_receive_words)],
            AWAITING_DICT_CHOICE: [CallbackQueryHandler(button_callback_handler, pattern="^addword_to_dict:")],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )

    application.add_handler(addword_conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("dict_upload", dict_upload_start))
    application.add_handler(MessageHandler(filters.Document.TXT, dict_upload_handler))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    
    # Add the error handler
    application.add_error_handler(error_handler)
    
    logger.info("Starting bot...")
    application.run_polling()

if __name__ == "__main__":
    main()