import os
import logging
import random
from io import BytesIO

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
BOT_TOKEN = "***REMOVED***"
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
DICT_PATH = "dictionaries/"

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id: 'filename.txt'}
user_selected_dict = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_available_dictionaries():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É DICT_PATH –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ .txt"""
    if not os.path.exists(DICT_PATH):
        os.makedirs(DICT_PATH)
    return [f for f in os.listdir(DICT_PATH) if f.endswith('.txt')]

def get_words_from_dict(filename: str, count: int = 0):
    """–ß–∏—Ç–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ count=0, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ. –ò–Ω–∞—á–µ - —Å–ª—É—á–∞–π–Ω—ã–µ."""
    try:
        with open(os.path.join(DICT_PATH, filename), 'r', encoding='utf-8') as f:
            words = [line.strip() for line in f if line.strip()]
        if count == 0:
            return words
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º count —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        return random.sample(words, min(count, len(words)))
    except FileNotFoundError:
        return []

# --- –ì–ï–ù–ï–†–ê–¢–û–†–´ –ö–õ–ê–í–ò–ê–¢–£–† ---

async def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="get_random_word")],
        [InlineKeyboardButton("üî¢ –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ", callback_data="show_get_multiple_menu")],
        [InlineKeyboardButton("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å", callback_data="change_dict_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_dict_selection_keyboard(action_prefix: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è."""
    dictionaries = get_available_dictionaries()
    keyboard = [[InlineKeyboardButton(d.replace('.txt', ''), callback_data=f"{action_prefix}:{d}")] for d in dictionaries]
    return InlineKeyboardMarkup(keyboard)

async def get_multiple_words_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤."""
    keyboard = [
        [
            InlineKeyboardButton("5", callback_data="get_multiple:5"),
            InlineKeyboardButton("10", callback_data="get_multiple:10"),
            InlineKeyboardButton("15", callback_data="get_multiple:15"),
        ],
        [InlineKeyboardButton("üìú –í–µ—Å—å —Å–ª–æ–≤–∞—Ä—å", callback_data="get_multiple:all")],
        # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    logger.info(f"User {user.id} ({user.first_name}) started the bot.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª–æ–≤–∞—Ä—å —Ä–∞–Ω–µ–µ
    if user.id not in user_selected_dict:
        await update.message.reply_html(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
            "–ü–æ—Ö–æ–∂–µ, —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:"
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è
        keyboard = await get_dict_selection_keyboard("set_default_dict")
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏:", reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        active_dict = user_selected_dict[user.id]
        keyboard = await get_main_menu_keyboard()
        await update.message.reply_text(
            f"–¢–≤–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: <b>{active_dict}</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    user_id = query.from_user.id
    data = query.data

    # --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
    if data.startswith("set_default_dict:"):
        dict_name = data.split(":")[1]
        user_selected_dict[user_id] = dict_name
        logger.info(f"User {user_id} set default dict to {dict_name}")
        await query.edit_message_text(f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>{dict_name}</b>.", parse_mode='HTML')
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        keyboard = await get_main_menu_keyboard()
        await query.message.reply_text("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å:", reply_markup=keyboard)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–æ–±—â–µ –≤—ã–±—Ä–∞–Ω
    if user_id not in user_selected_dict:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start")
        return

    active_dict = user_selected_dict[user_id]

    # --- –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    if data == "get_random_word":
        word = get_words_from_dict(active_dict, 1)
        if word:
            await query.edit_message_text(f"üé≤ –°–ª–æ–≤–æ: <b>{word[0]}</b>", parse_mode='HTML')
        else:
            await query.edit_message_text("–í —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —Å–ª–æ–≤ –∏–ª–∏ –æ–Ω –ø—É—Å—Ç!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–≥—Ä–∞—Ç—å –¥–∞–ª—å—à–µ
        await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=await get_main_menu_keyboard())

    elif data == "show_get_multiple_menu":
        keyboard = await get_multiple_words_keyboard()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=keyboard)
        
    elif data == "change_dict_menu":
        keyboard = await get_dict_selection_keyboard("set_default_dict")
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", reply_markup=keyboard)
        
    elif data == "back_to_main_menu":
        keyboard = await get_main_menu_keyboard()
        await query.edit_message_text(
            f"–¢–≤–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: <b>{active_dict}</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    # --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤ ---
    elif data.startswith("get_multiple:"):
        param = data.split(":")[1]
        
        if param == 'all':
            words_to_get = 0 # 0 - –∑–Ω–∞—á–∏—Ç –≤—Å–µ —Å–ª–æ–≤–∞
        else:
            words_to_get = int(param)
        
        word_list = get_words_from_dict(active_dict, words_to_get)

        if not word_list:
            await query.edit_message_text("–í —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —Å–ª–æ–≤!")
            return

        # üî• –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ —Å–ª–æ–≤ <= 10, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º. –ò–Ω–∞—á–µ - —Ñ–∞–π–ª–æ–º.
        if len(word_list) <= 10:
            response_text = "–°–ª–æ–≤–∞:\n" + "\n".join(f"‚Ä¢ {w}" for w in word_list)
            await query.edit_message_text(response_text)
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            file_content = "\n".join(word_list).encode('utf-8')
            file_in_memory = BytesIO(file_content)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=file_in_memory,
                filename=f"words_from_{active_dict}"
            )
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await query.edit_message_text("‚úÖ –¢–≤–æ–π —Ñ–∞–π–ª —Å–æ —Å–ª–æ–≤–∞–º–∏ –≥–æ—Ç–æ–≤:")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=await get_main_menu_keyboard())


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting bot...")
    application.run_polling()

if __name__ == "__main__":
    main()